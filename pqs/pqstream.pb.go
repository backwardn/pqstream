// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pqstream.proto

package pqs

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// An operation in the database.
type Operation int32

const (
	Operation_UNKNOWN  Operation = 0
	Operation_INSERT   Operation = 1
	Operation_UPDATE   Operation = 2
	Operation_DELETE   Operation = 3
	Operation_TRUNCATE Operation = 4
)

var Operation_name = map[int32]string{
	0: "UNKNOWN",
	1: "INSERT",
	2: "UPDATE",
	3: "DELETE",
	4: "TRUNCATE",
}

var Operation_value = map[string]int32{
	"UNKNOWN":  0,
	"INSERT":   1,
	"UPDATE":   2,
	"DELETE":   3,
	"TRUNCATE": 4,
}

func (x Operation) String() string {
	return proto.EnumName(Operation_name, int32(x))
}

func (Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_19400a35ec0d62d6, []int{0}
}

// A request to listen to database event streams.
type ListenRequest struct {
	// if provided, this string will be used to match table names to track.
	TableRegexp          string   `protobuf:"bytes,1,opt,name=table_regexp,json=tableRegexp,proto3" json:"table_regexp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListenRequest) Reset()         { *m = ListenRequest{} }
func (m *ListenRequest) String() string { return proto.CompactTextString(m) }
func (*ListenRequest) ProtoMessage()    {}
func (*ListenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19400a35ec0d62d6, []int{0}
}

func (m *ListenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenRequest.Unmarshal(m, b)
}
func (m *ListenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenRequest.Marshal(b, m, deterministic)
}
func (m *ListenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenRequest.Merge(m, src)
}
func (m *ListenRequest) XXX_Size() int {
	return xxx_messageInfo_ListenRequest.Size(m)
}
func (m *ListenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListenRequest proto.InternalMessageInfo

func (m *ListenRequest) GetTableRegexp() string {
	if m != nil {
		return m.TableRegexp
	}
	return ""
}

// RawEvent is an internal type.
type RawEvent struct {
	Schema               string          `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Table                string          `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Op                   Operation       `protobuf:"varint,3,opt,name=op,proto3,enum=pqs.Operation" json:"op,omitempty"`
	Id                   string          `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Payload              *_struct.Struct `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	Previous             *_struct.Struct `protobuf:"bytes,6,opt,name=previous,proto3" json:"previous,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RawEvent) Reset()         { *m = RawEvent{} }
func (m *RawEvent) String() string { return proto.CompactTextString(m) }
func (*RawEvent) ProtoMessage()    {}
func (*RawEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_19400a35ec0d62d6, []int{1}
}

func (m *RawEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawEvent.Unmarshal(m, b)
}
func (m *RawEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawEvent.Marshal(b, m, deterministic)
}
func (m *RawEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawEvent.Merge(m, src)
}
func (m *RawEvent) XXX_Size() int {
	return xxx_messageInfo_RawEvent.Size(m)
}
func (m *RawEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RawEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RawEvent proto.InternalMessageInfo

func (m *RawEvent) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *RawEvent) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *RawEvent) GetOp() Operation {
	if m != nil {
		return m.Op
	}
	return Operation_UNKNOWN
}

func (m *RawEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RawEvent) GetPayload() *_struct.Struct {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *RawEvent) GetPrevious() *_struct.Struct {
	if m != nil {
		return m.Previous
	}
	return nil
}

// A database event.
type Event struct {
	Schema string    `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Table  string    `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Op     Operation `protobuf:"varint,3,opt,name=op,proto3,enum=pqs.Operation" json:"op,omitempty"`
	// if the id column exists, this will populate it
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// payload is a json encoded representation of the changed object.
	Payload *_struct.Struct `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	// changes is, in the event of op==UPDATE an RFC7386 JSON merge patch.
	Changes              *_struct.Struct `protobuf:"bytes,6,opt,name=changes,proto3" json:"changes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_19400a35ec0d62d6, []int{2}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *Event) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *Event) GetOp() Operation {
	if m != nil {
		return m.Op
	}
	return Operation_UNKNOWN
}

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetPayload() *_struct.Struct {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Event) GetChanges() *_struct.Struct {
	if m != nil {
		return m.Changes
	}
	return nil
}

func init() {
	proto.RegisterEnum("pqs.Operation", Operation_name, Operation_value)
	proto.RegisterType((*ListenRequest)(nil), "pqs.ListenRequest")
	proto.RegisterType((*RawEvent)(nil), "pqs.RawEvent")
	proto.RegisterType((*Event)(nil), "pqs.Event")
}

func init() { proto.RegisterFile("pqstream.proto", fileDescriptor_19400a35ec0d62d6) }

var fileDescriptor_19400a35ec0d62d6 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x92, 0x4f, 0xcf, 0xd2, 0x40,
	0x10, 0xc6, 0xdf, 0x2d, 0x50, 0xca, 0x80, 0x4d, 0xb3, 0x31, 0xda, 0x70, 0x30, 0xd8, 0x13, 0x31,
	0xa6, 0x95, 0x12, 0x13, 0xaf, 0x46, 0x7a, 0x50, 0x49, 0xc1, 0xa5, 0xc4, 0xa3, 0xd9, 0x96, 0xb5,
	0x34, 0x29, 0xdd, 0x6d, 0x77, 0x8b, 0xf2, 0x19, 0xbd, 0xf8, 0x91, 0x0c, 0xcb, 0x9f, 0xc4, 0x8b,
	0x5e, 0xdf, 0xd3, 0xce, 0x3c, 0xf3, 0x3c, 0xc9, 0xfc, 0x36, 0x03, 0xb6, 0xa8, 0xa5, 0x6a, 0x18,
	0x3d, 0xf8, 0xa2, 0xe1, 0x8a, 0xe3, 0x8e, 0xa8, 0xe5, 0xf8, 0x6d, 0x5e, 0xa8, 0x7d, 0x9b, 0xfa,
	0x19, 0x3f, 0x04, 0x39, 0x2f, 0x69, 0x95, 0x07, 0x7a, 0x9a, 0xb6, 0xdf, 0x03, 0xa1, 0x4e, 0x82,
	0xc9, 0x40, 0xaa, 0xa6, 0xcd, 0xd4, 0xf5, 0xb9, 0x64, 0xbd, 0x10, 0x9e, 0x2c, 0x0b, 0xa9, 0x58,
	0x45, 0x58, 0xdd, 0x32, 0xa9, 0xf0, 0x4b, 0x18, 0x29, 0x9a, 0x96, 0xec, 0x5b, 0xc3, 0x72, 0xf6,
	0x53, 0xb8, 0x68, 0x82, 0xa6, 0x03, 0x32, 0xd4, 0x1a, 0xd1, 0x92, 0xf7, 0x1b, 0x81, 0x45, 0xe8,
	0x8f, 0xe8, 0xc8, 0x2a, 0x85, 0x9f, 0x81, 0x29, 0xb3, 0x3d, 0x3b, 0xd0, 0xab, 0xf3, 0xda, 0xe1,
	0xa7, 0xd0, 0xd3, 0x19, 0xd7, 0xd0, 0xf2, 0xa5, 0xc1, 0x2f, 0xc0, 0xe0, 0xc2, 0xed, 0x4c, 0xd0,
	0xd4, 0x0e, 0x6d, 0x5f, 0xd4, 0xd2, 0x5f, 0x09, 0xd6, 0x50, 0x55, 0xf0, 0x8a, 0x18, 0x5c, 0x60,
	0x1b, 0x8c, 0x62, 0xe7, 0x76, 0x75, 0xc4, 0x28, 0x76, 0x78, 0x06, 0x7d, 0x41, 0x4f, 0x25, 0xa7,
	0x3b, 0xb7, 0x37, 0x41, 0xd3, 0x61, 0xf8, 0xdc, 0xcf, 0x39, 0xcf, 0x4b, 0xe6, 0xdf, 0xe0, 0xfc,
	0x8d, 0xc6, 0x21, 0x37, 0x1f, 0x9e, 0x83, 0x25, 0x1a, 0x76, 0x2c, 0x78, 0x2b, 0x5d, 0xf3, 0xdf,
	0x99, 0xbb, 0xd1, 0xfb, 0x85, 0xa0, 0xf7, 0x48, 0x79, 0x66, 0xd0, 0xcf, 0xf6, 0xb4, 0xca, 0xd9,
	0x7f, 0x71, 0x6e, 0xbe, 0x57, 0x9f, 0x60, 0x70, 0x5f, 0x03, 0x0f, 0xa1, 0xbf, 0x8d, 0x3f, 0xc7,
	0xab, 0xaf, 0xb1, 0xf3, 0x80, 0x01, 0xcc, 0x8f, 0xf1, 0x26, 0x22, 0x89, 0x83, 0xce, 0xf5, 0x76,
	0xbd, 0x78, 0x9f, 0x44, 0x8e, 0x71, 0xae, 0x17, 0xd1, 0x32, 0x4a, 0x22, 0xa7, 0x83, 0x47, 0x60,
	0x25, 0x64, 0x1b, 0x7f, 0x38, 0x4f, 0xba, 0xe1, 0x3b, 0xb0, 0xd6, 0x5f, 0x36, 0xfa, 0xdc, 0xf0,
	0x6b, 0x30, 0x2f, 0xc7, 0x82, 0xb1, 0x66, 0xfd, 0xeb, 0x72, 0xc6, 0xa0, 0x35, 0xfd, 0x8b, 0xde,
	0xc3, 0x1b, 0x94, 0x9a, 0x7a, 0xbf, 0xf9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x75, 0xcc, 0x14,
	0x9e, 0xaf, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PQStreamClient is the client API for PQStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PQStreamClient interface {
	// Listen responds with a stream of database operations.
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (PQStream_ListenClient, error)
}

type pQStreamClient struct {
	cc *grpc.ClientConn
}

func NewPQStreamClient(cc *grpc.ClientConn) PQStreamClient {
	return &pQStreamClient{cc}
}

func (c *pQStreamClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (PQStream_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PQStream_serviceDesc.Streams[0], "/pqs.PQStream/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &pQStreamListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PQStream_ListenClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type pQStreamListenClient struct {
	grpc.ClientStream
}

func (x *pQStreamListenClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PQStreamServer is the server API for PQStream service.
type PQStreamServer interface {
	// Listen responds with a stream of database operations.
	Listen(*ListenRequest, PQStream_ListenServer) error
}

// UnimplementedPQStreamServer can be embedded to have forward compatible implementations.
type UnimplementedPQStreamServer struct {
}

func (*UnimplementedPQStreamServer) Listen(req *ListenRequest, srv PQStream_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}

func RegisterPQStreamServer(s *grpc.Server, srv PQStreamServer) {
	s.RegisterService(&_PQStream_serviceDesc, srv)
}

func _PQStream_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PQStreamServer).Listen(m, &pQStreamListenServer{stream})
}

type PQStream_ListenServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type pQStreamListenServer struct {
	grpc.ServerStream
}

func (x *pQStreamListenServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _PQStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pqs.PQStream",
	HandlerType: (*PQStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _PQStream_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pqstream.proto",
}
